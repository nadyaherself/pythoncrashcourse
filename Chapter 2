TRY IT YOURSELF
Write a separate program to accomplish each of these exercises. Save each program with a filename that follows standard Python conventions, using lowercase letters and underscores, such as simple_message.py and simple_messages.py.
2-1. Simple Message: Assign a message to a variable, and then print that message.
Answer:
simple_message = "This is a simple message."
print(simple_message)

2-2. Simple Messages: Assign a message to a variable, and print that message. Then change the value of the variable to a new message, and print the new message.
Answer:
simple_message = "This is the first message."
print(simple_message)
simple_message = "This is the new message."
print(simple_message)

TRY IT YOURSELF
Save each of the following exercises as a separate file, with a name like name _cases.py.
2-3. Personal Message: Use a variable to represent a person’s name, and print a message to that person. Your message should be simple, such as, “Hello Eric, would you like to learn some Python today?”
Answer:
eric = "Hi Eric of The Boyz! I like your cover of Justin Bieber song."
print(eric)

2-4. Name Cases: Use a variable to represent a person’s name, and then print that person’s name in lowercase, uppercase, and title case.
Answer:
name = "Idaho Charlos"
print(name.lower())
print(name.upper())
print(name.title())

2-5. Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the
following, including the quotation marks:
Albert Einstein once said, “A person who never made a mistake never tried anything new.”
Answer:
name = "Albert Einstein"
quote = "\"A person who never made a mistake never tried anything new.\""
print(name, "once said,", quote)

2-6. Famous Quote 2: Repeat Exercise 2-5, but this time, represent the famous person’s name using a variable called famous_person. Then compose your message and represent it with a new variable called message. Print your message.
Answer:
famous_person = "Albert Einstein"
message = "\"A person who never made a mistake never tried anything new.\""
print(famous_person, "once said,", message)

2-7. Stripping Names: Use a variable to represent a person’s name, and include some whitespace characters at the beginning and end of the name.
Make sure you use each character combination, "\t" and "\n", at least once. Print the name once, so the whitespace around the name is displayed.
Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().
Answer:
person_name = "\t\t  Brie Danielle\n"

print("Original Name:", person_name)
print("\nStripped using lstrip():", person_name.lstrip())
print("\nStripped using rstrip():", person_name.rstrip())
print("\nStripped using strip():", person_name.strip())

2-8. File Extensions: Python has a removesuffix() method that works exactly like removeprefix(). Assign the value 'python_notes.txt' to a variable called filename. Then use the removesuffix() method to display the filename without the file extension, like some file browsers do.
Answer:
filename = 'python_notes.txt'

filename_without_extension = filename.removesuffix('.txt')

print("Filename without extension:", filename_without_extension)

2-9. Number Eight: Write addition, subtraction, multiplication, and division operations that each result in the number 8. Be sure to enclose your operations in print() calls to see the results. You should create four lines that look like this: print(5+3)
Your output should be four lines, with the number 8 appearing once on each line.
Answer:
print("Addition:", 5 + 3)
print("Subtraction:", 10 - 2)
print("Multiplication:", 4 * 2)
print("Division:", 16 / 2)

2-10. Favorite Number: Use a variable to represent your favorite number. Then, using that variable, create a message that reveals your favorite number. Print that message.
Answer:
favorite_number = 28
message = "My favorite number is: " + str(favorite_number)
print(message)

2-11. Adding Comments: Choose two of the programs you’ve written, and add at least one comment to each. If you don’t have anything specific to write
because your programs are too simple at this point, just add your name and the current date at the top of each program file. Then write one sentence describing what the program does.
Answer:
# Addition
print("Addition:", 5 + 3)

# Subtraction
print("Subtraction:", 10 - 2)

# Multiplication
print("Multiplication:", 4 * 2)

# Division
print("Division:", 16 / 2)

2-12. Zen of Python: Enter import this into a Python terminal session and skim through the additional principles.
Answer:
  import this

Output:
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch. 
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.   
Namespaces are one honking great idea -- let's do more of those! 
