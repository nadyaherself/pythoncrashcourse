TRY IT YOURSELF
Try these short programs to get some firsthand experience with Python’s lists. You might want to create a new folder for each chapter’s exercises, to keep them organized.
3-1. Names: Store the names of a few of your friends in a list called names. Print each person’s name by accessing each element in the list, one at a time.
Answer:
# Store names in a list
names = ["Alice", "Bob", "Charlie", "David", "Eve"]

# Print each person's name
print("Exercise 3-1:")
for name in names:
    print(name)

3-2. Greetings: Start with the list you used in Exercise 3-1, but instead of just printing each person’s name, print a message to them. The text of each message should be the same, but each message should be personalized with the person’s name.
Answer:
# Personalized greetings
print("\nExercise 3-2:")
for name in names:
    print(f"Hello, {name}! How are you today?")

3-3. Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as “I would like to own a Honda motorcycle.”
Answer:
# List of favorite modes of transportation
transportation_modes = ["motorcycle", "car", "bicycle", "bus", "scooter"]

# Statements about transportation
print("\nExercise 3-3:")
for mode in transportation_modes:
    print(f"I would like to own a {mode.title()}.")

TRY IT YOURSELF
The following exercises are a bit more complex than those in Chapter 2, but they give you an opportunity to use lists in all of the ways described.
3-4. Guest List: If you could invite anyone, living or deceased, to dinner, who would you invite? Make a list that includes at least three people you’d like to
invite to dinner. Then use your list to print a message to each person, inviting them to dinner.
Answer:
# Initial guest list
guests = ["Albert Einstein", "Marie Curie", "Leonardo da Vinci"]
# Print invitation messages
for guest in guests:
    print(f"Dear {guest}, you are invited to dinner.")

3-5. Changing Guest List: You just heard that one of your guests can’t make the dinner, so you need to send out a new set of invitations. You’ll have to think of someone else to invite.
• Start with your program from Exercise 3-4. Add a print() call at the end of your program, stating the name of the guest who can’t make it.
• Modify your list, replacing the name of the guest who can’t make it with the name of the new person you are inviting.
• Print a second set of invitation messages, one for each person who is still in your list.
Answer:
# Name of the guest who can't make it
cannot_make_it = guests.pop(1)
print(f"\nUnfortunately, {cannot_make_it} can't make it to dinner.\n")

# Replace with a new person
new_person = "Isaac Newton"
guests.insert(1, new_person)

# Print new invitation messages
for guest in guests:
    print(f"Dear {guest}, you are invited to dinner.")


3-6. More Guests: You just found a bigger dinner table, so now more space is available. Think of three more guests to invite to dinner.
• Start with your program from Exercise 3-4 or 3-5. Add a print() call to the end of your program, informing people that you found a bigger table.
• Use insert() to add one new guest to the beginning of your list.
• Use insert() to add one new guest to the middle of your list.
• Use append() to add one new guest to the end of your list.
• Print a new set of invitation messages, one for each person in your list.
Answer:
# Inform about a bigger table
print("\nGood news! We found a bigger dinner table.\n")

# Add new guests
guests.insert(0, "Galileo Galilei")  # Insert at the beginning
guests.insert(2, "Nikola Tesla")  # Insert in the middle
guests.append("Ada Lovelace")  # Append at the end

# Print new invitation messages
for guest in guests:
    print(f"Dear {guest}, you are invited to dinner.")

3-7. Shrinking Guest List: You just found out that your new dinner table won’t arrive in time for the dinner, and now you have space for only two guests.
• Start with your program from Exercise 3-6. Add a new line that prints a message saying that you can invite only two people for dinner.
• Use pop() to remove guests from your list one at a time until only two names remain in your list. Each time you pop a name from your list, print a message to that person letting them know you’re sorry you can’t invite them to dinner.
• Print a message to each of the two people still on your list, letting them know they’re still invited.
• Use del to remove the last two names from your list, so you have an empty list. Print your list to make sure you actually have an empty list at the end of your program.
Answer:
# Inform about space for only two guests
print("\nUnfortunately, the new table won't arrive in time, and we can only invite two guests for dinner.\n")

# Use pop() to remove guests and print messages
while len(guests) > 2:
    removed_guest = guests.pop()
    print(f"Sorry, {removed_guest}, we can't invite you to dinner.")

# Print invitation messages for the remaining two guests
print("\nRemaining guests:")
for guest in guests:
    print(f"Dear {guest}, you are still invited to dinner.")

# Use del to empty the list
del guests[:]

# Print to verify an empty list
print("\nAfter removing all guests, the list is now:", guests)

TRY IT YOURSELF
3-8. Seeing the World: Think of at least five places in the world you’d like to visit.
• Store the locations in a list. Make sure the list is not in alphabetical order.
• Print your list in its original order. Don’t worry about printing the list neatly; just print it as a raw Python list.
• Use sorted() to print your list in alphabetical order without modifying the actual list.
• Show that your list is still in its original order by printing it.
• Use sorted() to print your list in reverse-alphabetical order without changing the order of the original list.
• Show that your list is still in its original order by printing it again.
• Use reverse() to change the order of your list. Print the list to show that its order has changed.
• Use reverse() to change the order of your list again. Print the list to show it’s back to its original order.
• Use sort() to change your list so it’s stored in alphabetical order. Print the list to show that its order has been changed.
• Use sort() to change your list so it’s stored in reverse-alphabetical order. Print the list to show that its order has changed.
Answer:
# Places to visit
places_to_visit = ["Paris", "Tokyo", "New York", "Sydney", "Machu Picchu"]

# Print the list in its original order
print("Original Order:")
print(places_to_visit)

# Print the list in alphabetical order using sorted()
print("\nAlphabetical Order:")
print(sorted(places_to_visit))

# Show that the list is still in its original order
print("\nOriginal Order (still):")
print(places_to_visit)

# Print the list in reverse-alphabetical order using sorted()
print("\nReverse-Alphabetical Order:")
print(sorted(places_to_visit, reverse=True))

# Show that the list is still in its original order
print("\nOriginal Order (still):")
print(places_to_visit)

# Change the order of the list using reverse()
places_to_visit.reverse()

# Print the list to show the order has changed
print("\nReversed Order:")
print(places_to_visit)

# Change the order of the list again using reverse()
places_to_visit.reverse()

# Print the list to show it's back to its original order
print("\nOriginal Order (back):")
print(places_to_visit)

# Change the order of the list using sort()
places_to_visit.sort()

# Print the list to show the order has changed to alphabetical
print("\nAlphabetical Order:")
print(places_to_visit)

# Change the order of the list using sort() for reverse-alphabetical
places_to_visit.sort(reverse=True)

# Print the list to show the order has changed to reverse-alphabetical
print("\nReverse-Alphabetical Order:")
print(places_to_visit)

3-9. Dinner Guests: Working with one of the programs from Exercises 3-4 through 3-7 , use len() to print a message indicating the number of people you’re inviting to dinner.
Answer:
# Number of people invited to dinner
num_guests = len(guests)

# Print a message indicating the number of people invited
print(f"\nNumber of people invited to dinner: {num_guests}")

3-10. Every Function: Think of things you could store in a list. For example, you could make a list of mountains, rivers, countries, cities, languages, or anything else you’d like. Write a program that creates a list containing these items and then uses each function introduced in this chapter at least once.
Answer:
# Create a list of items
items_list = ["mountains", "rivers", "countries", "cities", "languages"]

# Append an item to the list
items_list.append("oceans")

# Insert an item at a specific position
items_list.insert(2, "deserts")

# Remove an item by value
items_list.remove("rivers")

# Pop an item from a specific position
removed_item = items_list.pop(1)

# Sort the list in alphabetical order
items_list.sort()

# Sort the list in reverse-alphabetical order
items_list.sort(reverse=True)

# Reverse the order of the list
items_list.reverse()

# Print the final list
print("\nFinal List of Items:")
print(items_list)

3-11. Intentional Error: If you haven’t received an index error in one of your programs yet, try to make one happen. Change an index in one of your programs to produce an index error. Make sure you correct the error before closing the program.
Answer:
# Intentional Error Example

# Create a list
numbers = [1, 2, 3, 4, 5]

# Try to access an index that doesn't exist (causing an index error)
try:
    print(numbers[10])
except IndexError as e:
    print(f"Error: {e}")

# Correct the error by accessing a valid index
print("Accessing a valid index:", numbers[2])
