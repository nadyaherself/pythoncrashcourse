9-1. Restaurant: Make a class called Restaurant. The __init__() method for Restaurant should store two attributes: a restaurant_name and a cuisine_type. Make a method called describe_restaurant() that prints these two pieces of information, and a method called open_restaurant() that prints a message indicating that the restaurant is open. Make an instance called restaurant from your class. Print the two attributes individually, and then call both methods.
Answer:
class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")

    def open_restaurant(self):
        print(f"The restaurant {self.restaurant_name} is now open!")

# Creating an instance of the Restaurant class
restaurant = Restaurant("Pasta Paradise", "Italian")

# Printing individual attributes
print(f"Restaurant Name: {restaurant.restaurant_name}")
print(f"Cuisine Type: {restaurant.cuisine_type}")

# Calling methods
restaurant.describe_restaurant()
restaurant.open_restaurant()

9-2. Three Restaurants: Start with your class from Exercise 9-1. Create three different instances from the class, and call describe_restaurant() for each instance.
Answer:
# Creating three instances of the Restaurant class
restaurant1 = Restaurant("Sushi Sensation", "Japanese")
restaurant2 = Restaurant("Burger Barn", "American")
restaurant3 = Restaurant("Taco Town", "Mexican")

# Calling describe_restaurant() for each instance
restaurant1.describe_restaurant()
restaurant2.describe_restaurant()
restaurant3.describe_restaurant()

9-3. Users: Make a class called User. Create two attributes called first_name and last_name, and then create several other attributes that are typically stored in a user profile. Make a method called describe_user() that prints a summary of the user’s information. Make another method called greet_user() that prints a personalized greeting to the user. Create several instances representing different users, and call both methods for each user.
Answer:
class User:
    def __init__(self, first_name, last_name, age, email):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.email = email

    def describe_user(self):
        print(f"User: {self.first_name} {self.last_name}")
        print(f"Age: {self.age}")
        print(f"Email: {self.email}")

    def greet_user(self):
        print(f"Hello, {self.first_name}! Welcome back.")

# Creating instances of the User class
user1 = User("John", "Doe", 25, "john@example.com")
user2 = User("Alice", "Smith", 30, "alice@example.com")
user3 = User("Bob", "Johnson", 22, "bob@example.com")

# Calling methods for each user
user1.describe_user()
user1.greet_user()

user2.describe_user()
user2.greet_user()

user3.describe_user()
user3.greet_user()

9-4. Number Served: Start with your program from Exercise 9-1. Add an attribute called number_served with a default value of 0. Create an instance called restaurant from this class. Print the number of customers the restaurant has served, and then change this value and print it again.
Add a method called set_number_served() that lets you set the number of customers that have been served. Call this method with a new number and print the value again.
Add a method called increment_number_served() that lets you increment the number of customers who’ve been served. Call this method with any number you like that could represent how many customers were served in, say, a day of business.
Answer:
class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type
        self.number_served = 0

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")
        print(f"Number Served: {self.number_served} customers")

    def open_restaurant(self):
        print(f"The restaurant {self.restaurant_name} is now open!")

    def set_number_served(self, number):
        self.number_served = number

    def increment_number_served(self, increment):
        self.number_served += increment

# Creating an instance of the Restaurant class
restaurant = Restaurant("Pasta Paradise", "Italian")

# Printing the initial number of customers served
restaurant.describe_restaurant()

# Setting and printing a new number of customers served
restaurant.set_number_served(50)
restaurant.describe_restaurant()

# Incrementing and printing the number of customers served
restaurant.increment_number_served(30)
restaurant.describe_restaurant()

9-5. Login Attempts: Add an attribute called login_attempts to your User class from Exercise 9-3. Write a method called increment_login_attempts() that increments the value of login_attempts by 1. Write another method called reset_login_attempts() that resets the value of login_attempts to 0.
Make an instance of the User class and call increment_login_attempts() several times. Print the value of login_attempts to make sure it was incremented properly, and then call reset_login_attempts(). Print login_attempts again to make sure it was reset to 0.
Answer:
class User:
    def __init__(self, first_name, last_name, age, email):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.email = email
        self.login_attempts = 0

    def describe_user(self):
        print(f"User: {self.first_name} {self.last_name}")
        print(f"Age: {self.age}")
        print(f"Email: {self.email}")
        print(f"Login Attempts: {self.login_attempts}")

    def greet_user(self):
        print(f"Hello, {self.first_name}! Welcome back.")

    def increment_login_attempts(self):
        self.login_attempts += 1

    def reset_login_attempts(self):
        self.login_attempts = 0

# Creating an instance of the User class
user = User("John", "Doe", 25, "john@example.com")

# Incrementing login attempts and printing
user.increment_login_attempts()
user.increment_login_attempts()
user.describe_user()

# Resetting login attempts and printing
user.reset_login_attempts()
user.describe_user()

9-6. Ice Cream Stand: An ice cream stand is a specific kind of restaurant. Write a class called IceCreamStand that inherits from the Restaurant class you wrote in Exercise 9-1 or Exercise 9-4. Either version of the class will work; just pick the one you like better. Add an attribute called flavors that stores a list of ice cream flavors. Write a method that displays these flavors. Create an instance of IceCreamStand, and call this method.
Answer:
class IceCreamStand(Restaurant):
    def __init__(self, restaurant_name, cuisine_type, flavors):
        super().__init__(restaurant_name, cuisine_type)
        self.flavors = flavors

    def display_flavors(self):
        print("Available Ice Cream Flavors:")
        for flavor in self.flavors:
            print(f"- {flavor}")

# Creating an instance of the IceCreamStand class
ice_cream_stand = IceCreamStand("Sweet Treats", "Dessert", ["Chocolate", "Vanilla", "Strawberry"])

# Displaying available ice cream flavors
ice_cream_stand.display_flavors()

9-7. Admin: An administrator is a special kind of user. Write a class called Admin that inherits from the User class you wrote in Exercise 9-3 or Exercise 9-5. Add an attribute, privileges, that stores a list of strings like "can add post", "can delete post", "can ban user", and so on. Write a method called show_privileges() that lists the administrator’s set of
privileges. Create an instance of Admin, and call your method.
Answer:
class Admin(User):
    def __init__(self, first_name, last_name, age, email, privileges):
        super().__init__(first_name, last_name, age, email)
        self.privileges = privileges

    def show_privileges(self):
        print("Admin Privileges:")
        for privilege in self.privileges:
            print(f"- {privilege}")

# Creating an instance of the Admin class
admin_user = Admin("Admin", "User", 30, "admin@example.com", ["can add post", "can delete post"])

# Displaying admin privileges
admin_user.show_privileges()

9-8. Privileges: Write a separate Privileges class. The class should have one attribute, privileges, that stores a list of strings as described in Exercise 9-7. Move the show_privileges() method to this class. Make a Privileges instance as an attribute in the Admin class. Create a new instance of Admin and use your method to show its privileges.
Answer:
class Privileges:
    def __init__(self, privileges):
        self.privileges = privileges

    def show_privileges(self):
        print("Admin Privileges:")
        for privilege in self.privileges:
            print(f"- {privilege}")

class Admin(User):
    def __init__(self, first_name, last_name, age, email, privileges):
        super().__init__(first_name, last_name, age, email)
        self.privileges = Privileges(privileges)

# Creating an instance of the Admin class with Privileges instance
admin_user = Admin("Admin", "User", 30, "admin@example.com", ["can add post", "can delete post"])

# Displaying admin privileges
admin_user.privileges.show_privileges()

9-9. Battery Upgrade: Use the final version of electric_car.py from this section. Add a method to the Battery class called upgrade_battery(). This method should check the battery size and set the capacity to 65 if it isn’t already. Make an electric car with a default battery size, call get_range() once, and then call get_range() a second time after upgrading the battery. You should see an increase in the car’s range.
Answer:
class Battery:
    def __init__(self, battery_size=60):
        self.battery_size = battery_size

    def describe_battery(self):
        print(f"Battery Size: {self.battery_size}-kWh")

    def get_range(self):
        if self.battery_size == 60:
            range = 140
        elif self.battery_size == 85:
            range = 185
        else:
            range = 0
        return range

    def upgrade_battery(self):
        if self.battery_size != 85:
            self.battery_size = 85

class ElectricCar:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.battery = Battery()

# Creating an instance of ElectricCar
my_car = ElectricCar("Tesla", "Model S", 2022)

# Displaying initial battery size and range
my_car.battery.describe_battery()
print(f"Initial Range: {my_car.battery.get_range()} miles")

# Upgrading the battery and displaying the new range
my_car.battery.upgrade_battery()
my_car.battery.describe_battery()
print(f"Upgraded Range: {my_car.battery.get_range()} miles")

9-10. Imported Restaurant: Using your latest Restaurant class, store it in a module. Make a separate file that imports Restaurant. Make a Restaurant instance, and call one of Restaurant’s methods to show that the import statement is working properly.
Answer:
--------------------------------------------------
restaurant.py (Module containing Restaurant class)
--------------------------------------------------
class Restaurant:
    def __init__(self, restaurant_name, cuisine_type):
        self.restaurant_name = restaurant_name
        self.cuisine_type = cuisine_type

    def describe_restaurant(self):
        print(f"Restaurant Name: {self.restaurant_name}")
        print(f"Cuisine Type: {self.cuisine_type}")

    def open_restaurant(self):
        print(f"{self.restaurant_name} is now open!")
-----------------------------------------
main.py (File importing Restaurant class)
-----------------------------------------
from restaurant import Restaurant

# Creating an instance of the Restaurant class
my_restaurant = Restaurant("Food Paradise", "Italian")

# Calling methods of the Restaurant class
my_restaurant.describe_restaurant()
my_restaurant.open_restaurant()

9-11. Imported Admin: Start with your work from Exercise 9-8. Store the classes User, Privileges, and Admin in one module. Create a separate file, make an Admin instance, and call show_privileges() to show that everything is working correctly.
Answer:
--------------------------------------
user.py (Module containing User class)
--------------------------------------
class User:
    def __init__(self, first_name, last_name, age, email):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.email = email
---------------------------------------------------------
admin.py (Module containing Privileges and Admin classes)
---------------------------------------------------------
class Privileges:
    def __init__(self, privileges):
        self.privileges = privileges

    def show_privileges(self):
        print("Admin Privileges:")
        for privilege in self.privileges:
            print(f"- {privilege}")

class Admin(User):
    def __init__(self, first_name, last_name, age, email, privileges):
        super().__init__(first_name, last_name, age, email)
        self.privileges = Privileges(privileges)
-------------------------------------
main.py (File importing Admin class)
-------------------------------------
from admin import Admin

# Creating an instance of the Admin class with Privileges instance
admin_user = Admin("Admin", "User", 30, "admin@example.com", ["can add post", "can delete post"])

# Displaying admin privileges
admin_user.privileges.show_privileges()

9-12. Multiple Modules: Store the User class in one module, and store the Privileges and Admin classes in a separate module. In a separate file, create an Admin instance and call show_privileges() to show that everything is still working correctly.
Answer:
--------------------------------------
user.py (Module containing User class)
--------------------------------------
class User:
    def __init__(self, first_name, last_name, age, email):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.email = email
---------------------------------------------------------
admin.py (Module containing Privileges and Admin classes)
---------------------------------------------------------
class Privileges:
    def __init__(self, privileges):
        self.privileges = privileges

    def show_privileges(self):
        print("Admin Privileges:")
        for privilege in self.privileges:
            print(f"- {privilege}")

class Admin(User):
    def __init__(self, first_name, last_name, age, email, privileges):
        super().__init__(first_name, last_name, age, email)
        self.privileges = Privileges(privileges)
------------------------------------
main.py (File importing Admin class)
--------------------------------------
from admin import Admin

# Creating an instance of the Admin class with Privileges instance
admin_user = Admin("Admin", "User", 30, "admin@example.com", ["can add post", "can delete post"])

# Displaying admin privileges
admin_user.privileges.show_privileges()

9-13. Dice: Make a class Die with one attribute called sides, which has a default value of 6. Write a method called roll_die() that prints a random number between 1 and the number of sides the die has. Make a 6-sided die and roll it 10 times. Make a 10-sided die and a 20-sided die. Roll each die 10 times.
Answer:
import random

class Die:
    def __init__(self, sides=6):
        self.sides = sides

    def roll_die(self):
        result = random.randint(1, self.sides)
        print(f"Rolling a {self.sides}-sided die: {result}")

# Create a 6-sided die
six_sided_die = Die()

# Roll the 6-sided die 10 times
for _ in range(10):
    six_sided_die.roll_die()

# Create a 10-sided die
ten_sided_die = Die(sides=10)

# Roll the 10-sided die 10 times
for _ in range(10):
    ten_sided_die.roll_die()

# Create a 20-sided die
twenty_sided_die = Die(sides=20)

# Roll the 20-sided die 10 times
for _ in range(10):
    twenty_sided_die.roll_die()


9-14. Lottery: Make a list or tuple containing a series of 10 numbers and 5 letters. Randomly select 4 numbers or letters from the list and print a message saying that any ticket matching these 4 numbers or letters wins a prize.
Answer:
import random

# Define a list containing numbers and letters
lottery_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'A', 'B', 'C', 'D', 'E']

# Randomly select 4 numbers or letters
winning_ticket = random.sample(lottery_numbers, 4)

# Print the winning ticket
print(f"Winning Ticket: {winning_ticket}")

9-15. Lottery Analysis: You can use a loop to see how hard it might be to win the kind of lottery you just modeled. Make a list or tuple called my_ticket. Write a loop that keeps pulling numbers until your ticket wins. Print a message reporting how many times the loop had to run to give you a winning ticket.
Answer:
import random

def lottery_analysis():
    my_ticket = [1, 2, 3, 'A']

    attempts = 0
    while True:
        attempts += 1
        current_ticket = random.sample(lottery_numbers, 4)
        if current_ticket == my_ticket:
            print(f"Congratulations! It took {attempts} attempts to win.")
            
# Run the lottery analysis
lottery_analysis()

9-16. Python Module of the Week: One excellent resource for exploring the Python standard library is a site called Python Module of the Week. Go to https://pymotw.com and look at the table of contents. Find a module that looks interesting to you and read about it, perhaps starting with the random module.
Answer:
OK
