TRY IT YOURSELF
5-1. Conditional Tests: Write a series of conditional tests. Print a statement describing each test and your prediction for the results of each test. Your code should look something like this:
  car = 'subaru'
  print("Is car == 'subaru'? I predict True.")
  print(car == 'subaru')
  print("\nIs car == 'audi'? I predict False.")
  print(car == 'audi')
• Look closely at your results, and make sure you understand why each line evaluates to True or False.
• Create at least 10 tests. Have at least 5 tests evaluate to True and another 5 tests evaluate to False.
Answer:
# Exercise 5-1: Conditional Tests

# Test 1: Equality
car = 'subaru'
print("Is car == 'subaru'? I predict True.")
print(car == 'subaru')

# Test 2: Inequality
print("\nIs car == 'audi'? I predict False.")
print(car == 'audi')

# Test 3: Numerical test (greater than)
age = 25
print("\nIs age > 18? I predict True.")
print(age > 18)

# Test 4: Numerical test (less than or equal to)
temperature = 30
print("\nIs temperature <= 32? I predict True.")
print(temperature <= 32)

# Test 5: Test using the 'and' keyword
is_sunny = True
is_warm = True
print("\nIs it sunny and warm? I predict True.")
print(is_sunny and is_warm)

# Test 6: Test using the 'or' keyword
is_raining = False
is_cold = True
print("\nIs it raining or cold? I predict True.")
print(is_raining or is_cold)

# Test 7: Test whether an item is in a list
fruits = ['apple', 'banana', 'orange']
print("\nIs 'banana' in the list? I predict True.")
print('banana' in fruits)

# Test 8: Test whether an item is not in a list
print("\nIs 'grape' not in the list? I predict True.")
print('grape' not in fruits)

# Test 9: Test using the lower() method
word = 'Python'
print("\nIs 'python' == 'Python' (case-insensitive)? I predict True.")
print(word.lower() == 'python')

# Test 10: Equality test with strings
color = 'blue'
print("\nIs color == 'green'? I predict False.")
print(color == 'green')

5-2. More Conditional Tests: You don’t have to limit the number of tests you create to 10. If you want to try more comparisons, write more tests and add them to conditional_tests.py. Have at least one True and one False result for each of the following:
• Tests for equality and inequality with strings
• Tests using the lower() method
• Numerical tests involving equality and inequality, greater than and less than, greater than or equal to, and less than or equal to
• Tests using the and keyword and the or keyword
• Test whether an item is in a list
• Test whether an item is not in a list
Answer:
# Tests for equality and inequality with strings
city = 'New York'
print("\nIs city == 'New York'? I predict True.")
print(city == 'New York')

animal = 'Lion'
print("\nIs animal != 'Tiger'? I predict True.")
print(animal != 'Tiger')

# Tests using the lower() method
fruit = 'Apple'
print("\nIs fruit.lower() == 'apple'? I predict True.")
print(fruit.lower() == 'apple')

# Numerical tests
number = 42
print("\nIs number == 42? I predict True.")
print(number == 42)

print("\nIs number < 50? I predict True.")
print(number < 50)

print("\nIs number >= 40? I predict True.")
print(number >= 40)

# Tests using the 'and' keyword and the 'or' keyword
is_sunny = True
is_warm = False
print("\nIs it sunny and warm? I predict False.")
print(is_sunny and is_warm)

print("\nIs it sunny or warm? I predict True.")
print(is_sunny or is_warm)

# Test whether an item is in a list
colors = ['red', 'green', 'blue']
print("\nIs 'yellow' in colors? I predict False.")
print('yellow' in colors)

# Test whether an item is not in a list
print("\nIs 'green' not in colors? I predict False.")
print('green' not in colors)

5-3. Alien Colors #1: Imagine an alien was just shot down in a game. Create a variable called alien_color and assign it a value of 'green', 'yellow', or 'red'.
• Write an if statement to test whether the alien’s color is green. If it is, print a message that the player just earned 5 points.
• Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)
Answer:
alien_color = 'green'

# Passing the if test
if alien_color == 'green':
    print("The player just earned 5 points.")
    
# Failing the if test (no output)
if alien_color == 'red':
    print("This won't be printed.")

5-4. Alien Colors #2: Choose a color for an alien as you did in Exercise 5-3, and write an if-else chain.
• If the alien’s color is green, print a statement that the player just earned 5 points for shooting the alien.
• If the alien’s color isn’t green, print a statement that the player just earned 10 points.
• Write one version of this program that runs the if block and another that runs the else block.
Answer:
alien_color = 'yellow'

# Running the if block
if alien_color == 'green':
    print("The player just earned 5 points for shooting the alien.")
# Running the else block
else:
    print("The player just earned 10 points.")

5-5. Alien Colors #3: Turn your if-else chain from Exercise 5-4 into an if-elifelse chain.
• If the alien is green, print a message that the player earned 5 points.
• If the alien is yellow, print a message that the player earned 10 points.
• If the alien is red, print a message that the player earned 15 points.
• Write three versions of this program, making sure each message is printed for the appropriate color alien.
Answer:
alien_color = 'red'

# If-elif-else chain
if alien_color == 'green':
    print("The player earned 5 points.")
elif alien_color == 'yellow':
    print("The player earned 10 points.")
else:
    print("The player earned 15 points.")

5-6. Stages of Life: Write an if-elif-else chain that determines a person’s stage of life. Set a value for the variable age, and then:
• If the person is less than 2 years old, print a message that the person is a baby.
• If the person is at least 2 years old but less than 4, print a message that the person is a toddler.
• If the person is at least 4 years old but less than 13, print a message that the person is a kid.
• If the person is at least 13 years old but less than 20, print a message that the person is a teenager.
• If the person is at least 20 years old but less than 65, print a message that the person is an adult.
• If the person is age 65 or older, print a message that the person is an elder.
Answer:
age = 25

# If-elif-else chain for determining the stage of life
if age < 2:
    print("The person is a baby.")
elif 2 <= age < 4:
    print("The person is a toddler.")
elif 4 <= age < 13:
    print("The person is a kid.")
elif 13 <= age < 20:
    print("The person is a teenager.")
elif 20 <= age < 65:
    print("The person is an adult.")
else:
    print("The person is an elder.")

5-7. Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent if statements that check for certain fruits in your list.
• Make a list of your three favorite fruits and call it favorite_fruits.
• Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!
Answer:
# Make a list of your three favorite fruits
favorite_fruits = ['apple', 'banana', 'strawberry']

# Write independent if statements to check for certain fruits
if 'banana' in favorite_fruits:
    print("You really like bananas!")

if 'apple' in favorite_fruits:
    print("You really like apples!")

if 'orange' in favorite_fruits:
    print("You really like oranges!")

if 'strawberry' in favorite_fruits:
    print("You really like strawberries!")

if 'kiwi' in favorite_fruits:
    print("You really like kiwis!")

5-8. Hello Admin: Make a list of five or more usernames, including the name 'admin'. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user.
• If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?
• Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.
Answer:
# List of usernames
usernames = ['admin', 'Jaden', 'Alice', 'Bob', 'Charlie']

# Loop through the list and print greetings
for username in usernames:
    if username.lower() == 'admin':
        print(f"Hello {username}, would you like to see a status report?")
    else:
        print(f"Hello {username}, thank you for logging in again.")

5-9. No Users: Add an if test to hello_admin.py to make sure the list of users is not empty.
• If the list is empty, print the message We need to find some users!
• Remove all of the usernames from your list, and make sure the correct message is printed.
Answer:
# Check if the list of users is not empty
if usernames:
    # Loop through the list and print greetings
    for username in usernames:
        if username.lower() == 'admin':
            print(f"Hello {username}, would you like to see a status report?")
        else:
            print(f"Hello {username}, thank you for logging in again.")
else:
    print("We need to find some users!")

5-10. Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.
• Make a list of five or more usernames called current_users.
• Make another list of five usernames called new_users. Make sure one or two of the new usernames are also in the current_users list.
• Loop through the new_users list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.
• Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you’ll need to make a copy of current_users containing the lowercase versions of all existing users.)
Answer:
# List of current users
current_users = ['admin', 'Jaden', 'Alice', 'Bob', 'Charlie']

# List of new users
new_users = ['John', 'Charlie', 'Sarah', 'mike', 'ALICE']

# Create a copy of current_users with lowercase versions
current_users_lower = [user.lower() for user in current_users]

# Loop through new_users to check for uniqueness
for new_user in new_users:
    if new_user.lower() in current_users_lower:
        print(f"Sorry, {new_user} is not available. Please enter a new username.")
    else:
        print(f"Congratulations! {new_user} is available.")

5-11. Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.
• Store the numbers 1 through 9 in a list.
• Loop through the list.
• Use an if-elif-else chain inside the loop to print the proper ordinal ending for each number. Your output should read "1st 2nd 3rd 4th 5th 6th 7th 8th 9th", and each result should be on a separate line.
Answer:
# List of numbers 1 through 9
numbers = list(range(1, 10))

# Loop through the list and print ordinal numbers
for number in numbers:
    if number == 1:
        ordinal = "st"
    elif number == 2:
        ordinal = "nd"
    elif number == 3:
        ordinal = "rd"
    else:
        ordinal = "th"
    print(f"{number}{ordinal}")

5-12. Styling if Statements: Review the programs you wrote in this chapter, and make sure you styled your conditional tests appropriately.
Answer:
  Styling is a subjective aspect of coding, and different programmers may have different preferences. However, here are some general tips for styling if statements:
  Indentation: Ensure proper indentation for readability. Use consistent spaces or tabs.
  Spacing: Add spaces around comparison operators for clarity. For example, use x == y instead of x==y.
  Parentheses: While parentheses around conditions are often optional, consider using them for clarity when dealing with complex conditions or to make precedence explicit.
  Line Length: Keep lines within a reasonable length (PEP 8 suggests 79 characters). If a condition is too long, break it into multiple lines.
# Original code
if x>5 and (y==10 or z>20):
    print("Condition met!")

# Styled code
if x > 5 and (y == 10 or z > 20):
    print("Condition met!")

5-13. Your Ideas: At this point, you’re a more capable programmer than you were when you started this book. Now that you have a better sense of how real-world situations are modeled in programs, you might be thinking of some problems you could solve with your own programs. Record any new ideas you have about problems you might want to solve as your programming skills continue to improve. Consider games you might want to write, datasets you might want to explore, and web applications you’d like to create.
Answer:
  Games: What type of games would you enjoy creating? Could be simple text-based games or more complex graphical ones.  
  Datasets: Is there a specific dataset you'd like to explore or analyze? Think about areas of interest such as finance, health, sports, or any other field.
  Web Applications: Are there web applications or tools you wish existed? Consider building them. It could be anything from a personal productivity tool to a social networking feature.
  Automation: Identify repetitive tasks in your life that could be automated. This could be anything from file organization to data extraction.
  Learning Tools: Build tools that could aid in learning a new skill or subject. This could be flashcard applications, quiz generators, etc.
  Community Projects: Consider contributing to open-source projects or creating something that could benefit a community.
