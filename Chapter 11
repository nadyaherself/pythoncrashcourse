11-1. City, Country: Write a function that accepts two parameters: a city name and a country name. The function should return a single string of the form City, Country, such as Santiago, Chile. Store the function in a module called city_functions.py, and save this file in a new folder so pytest won’t try to run the tests we’ve already written. Create a file called test_cities.py that tests the function you just wrote. Write a function called test_city_country() to verify that calling your function with values such as 'santiago' and 'chile' results in the correct string. Run the test, and make sure test_city_country() passes.
Answer:
city_functions.py:
def format_city_country(city, country):
    return f"{city.title()}, {country.title()}"

test_cities.py:
from city_functions import format_city_country

def test_city_country():
    formatted_city_country = format_city_country('santiago', 'chile')
    assert formatted_city_country == 'Santiago, Chile'

Run the test using the following command:
pytest test_cities.py

11-2. Population: Modify your function so it requires a third parameter, population. It should now return a single string of the form City, Country – population xxx, such as Santiago, Chile – population 5000000. Run the test again, and make sure test_city_country() fails this time. Modify the function so the population parameter is optional. Run the test, and make sure test_city_country() passes again. Write a second test called test_city_country_population() that verifies you can call your function with the values 'santiago', 'chile', and 'population =5000000'. Run the tests one more time, and make sure this new test passes.
Answer:
city_functions.py:
def format_city_country_population(city, country, population=None):
    if population:
        return f"{city.title()}, {country.title()} – population {population:,}"
    else:
        return f"{city.title()}, {country.title()}"

test_cities.py:
from city_functions import format_city_country_population

def test_city_country_population():
    formatted_city_country = format_city_country_population('santiago', 'chile')
    assert formatted_city_country == 'Santiago, Chile'

def test_city_country_population_with_population():
    formatted_city_country = format_city_country_population('santiago', 'chile', population=5000000)
    assert formatted_city_country == 'Santiago, Chile – population 5,000,000'

Run the tests using the following command:
pytest test_cities.py

11-3. Employee: Write a class called Employee. The __init__() method should take in a first name, a last name, and an annual salary, and store each of these as attributes. Write a method called give_raise() that adds $5,000 to the annual salary by default but also accepts a different raise amount. Write a test file for Employee with two test functions, test_give_default
_raise() and test_give_custom_raise(). Write your tests once without using a fixture, and make sure they both pass. Then write a fixture so you don’t have to create a new employee instance in each test function. Run the tests again, and make sure both tests still pass.
Answer:
employee.py:
class Employee:
    def __init__(self, first_name, last_name, annual_salary):
        self.first_name = first_name
        self.last_name = last_name
        self.annual_salary = annual_salary

    def give_raise(self, raise_amount=5000):
        self.annual_salary += raise_amount

test_employee.py:
from employee import Employee

def test_give_default_raise():
    emp = Employee('John', 'Doe', 60000)
    emp.give_raise()
    assert emp.annual_salary == 65000

def test_give_custom_raise():
    emp = Employee('Jane', 'Smith', 70000)
    emp.give_raise(10000)
    assert emp.annual_salary == 80000

Run the tests using the following command:
pytest test_employee.py
